{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91981\\\\Nigel\\\\Internship\\\\ONGC\\\\ONGC_REACT_RACK\\\\myapp\\\\src\\\\components\\\\home_components\\\\GnG.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Table from '../reusable/Table';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GnG = () => {\n  _s();\n  const [normalizedRacks, setNormalizedRacks] = useState({});\n\n  // Function to Normalize array lengths\n  function normalizeArrayLengths(data, fillValue = \"\") {\n    const maxLength = Math.max(...Object.values(data).map(arr => arr.length));\n    return Object.fromEntries(Object.entries(data).map(([key, value]) => [key, value.concat(Array(maxLength - value.length).fill(fillValue))]));\n  }\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await axios.get('/general/data-centers/1/components');\n        const data = response.data;\n        console.log(\"Racks:\", data);\n\n        // Assuming the data structure is similar to your sample racks\n        const normalizedData = normalizeArrayLengths(data);\n        setNormalizedRacks(normalizedData);\n        console.log(normalizedRacks);\n      } catch (error) {\n        console.error(\"Error fetching components:\", error);\n        // Handle errors appropriately, e.g., display an error message to the user\n      }\n    }\n    fetchData();\n  }, []);\n  if (Object.keys(normalizedRacks).length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex mx-2 border-r border-black\",\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      rack: normalizedRacks.server,\n      name: \"Server\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      rack: normalizedRacks.network_1,\n      name: \"Network-I\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      rack: normalizedRacks.network_2,\n      name: \"Network-II\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      rack: normalizedRacks.storage,\n      name: \"Storage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      rack: normalizedRacks.peripheral,\n      name: \"Peripheral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(GnG, \"GNlhK6msdrZCFfe58dw2ryaLJyE=\");\n_c = GnG;\nexport default GnG;\nvar _c;\n$RefreshReg$(_c, \"GnG\");","map":{"version":3,"names":["React","useState","useEffect","Table","axios","jsxDEV","_jsxDEV","GnG","_s","normalizedRacks","setNormalizedRacks","normalizeArrayLengths","data","fillValue","maxLength","Math","max","Object","values","map","arr","length","fromEntries","entries","key","value","concat","Array","fill","fetchData","response","get","console","log","normalizedData","error","keys","children","fileName","_jsxFileName","lineNumber","columnNumber","className","rack","server","name","network_1","network_2","storage","peripheral","_c","$RefreshReg$"],"sources":["C:/Users/91981/Nigel/Internship/ONGC/ONGC_REACT_RACK/myapp/src/components/home_components/GnG.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Table from '../reusable/Table'\r\nimport axios from \"axios\"\r\n\r\nconst GnG = () => {\r\n    const [normalizedRacks, setNormalizedRacks] = useState({});\r\n\r\n    // Function to Normalize array lengths\r\n    function normalizeArrayLengths(data, fillValue = \"\") {\r\n        const maxLength = Math.max(...Object.values(data).map((arr) => arr.length));\r\n        return Object.fromEntries(\r\n            Object.entries(data).map(([key, value]) => [key, value.concat(Array(maxLength - value.length).fill(fillValue))])\r\n        );\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                const response = await axios.get('/general/data-centers/1/components');\r\n                const data = response.data;\r\n                console.log(\"Racks:\", data);\r\n                \r\n                // Assuming the data structure is similar to your sample racks\r\n                const normalizedData = normalizeArrayLengths(data);\r\n                setNormalizedRacks(normalizedData);\r\n                console.log(normalizedRacks)\r\n            } catch (error) {\r\n                console.error(\"Error fetching components:\", error);\r\n                // Handle errors appropriately, e.g., display an error message to the user\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    if (Object.keys(normalizedRacks).length === 0) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className='flex mx-2 border-r border-black'>\r\n            <Table rack={normalizedRacks.server} name=\"Server\" />\r\n            <Table rack={normalizedRacks.network_1} name=\"Network-I\" />\r\n            <Table rack={normalizedRacks.network_2} name=\"Network-II\" />\r\n            <Table rack={normalizedRacks.storage} name=\"Storage\" />\r\n            <Table rack={normalizedRacks.peripheral} name=\"Peripheral\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GnG"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}