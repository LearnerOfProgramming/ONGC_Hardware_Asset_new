{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91981\\\\Nigel\\\\Internship\\\\ONGC\\\\ONGC_REACT_RACK\\\\myapp\\\\src\\\\components\\\\GnG.js\";\nimport React from 'react';\nimport Table from './Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GnG = () => {\n  const racks = {\n    server: [\"test1\", \"test2\", \"test3\", \"test4\", \"test5\"],\n    network_1: [\"test1\", \"test2\", \"\"],\n    network_2: [\"test1\", \"test2\"],\n    storage: [\"test1\", \"test2\"],\n    peripheral: [\"test1\", \"test2\"]\n  };\n  function normalizeArrayLengths(data, fillValue = \"\") {\n    const maxLength = Math.max(...Object.values(data).map(arr => arr.length));\n    return Object.fromEntries(Object.entries(data).map(([key, value]) => [key, value.concat(Array(maxLength - value.length).fill(fillValue))]));\n  }\n  const normalizedRacks = normalizeArrayLengths(racks);\n  console.log(normalizedRacks);\n  function addSerialNumbers() {\n    const tableBody = document.querySelector('tbody');\n    let serialNumber = 1; // Starting serial number\n\n    // Loop through all table rows\n    const tableRows = tableBody.querySelectorAll('tr');\n    for (const row of tableRows) {\n      // Loop through all cells in the current row\n      const tableCells = row.querySelectorAll('td');\n      for (const cell of tableCells) {\n        cell.textContent = serialNumber + '. ' + cell.textContent;\n        serialNumber++; // Increment serial number for the next cell\n      }\n    }\n  }\n  addSerialNumbers();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex mx-2 border-r border-black mt-10\",\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      rack: normalizedRacks.server,\n      name: \"Server\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      rack: normalizedRacks.network_1,\n      name: \"Network-I\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      rack: normalizedRacks.network_2,\n      name: \"Network-II\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      rack: normalizedRacks.storage,\n      name: \"Storage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      rack: normalizedRacks.peripheral,\n      name: \"Peripheral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_c = GnG;\nexport default GnG;\nvar _c;\n$RefreshReg$(_c, \"GnG\");","map":{"version":3,"names":["React","Table","jsxDEV","_jsxDEV","GnG","racks","server","network_1","network_2","storage","peripheral","normalizeArrayLengths","data","fillValue","maxLength","Math","max","Object","values","map","arr","length","fromEntries","entries","key","value","concat","Array","fill","normalizedRacks","console","log","addSerialNumbers","tableBody","document","querySelector","serialNumber","tableRows","querySelectorAll","row","tableCells","cell","textContent","className","children","rack","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/91981/Nigel/Internship/ONGC/ONGC_REACT_RACK/myapp/src/components/GnG.js"],"sourcesContent":["import React from 'react'\r\nimport Table from './Table'\r\n\r\nconst GnG = () => {\r\n    const racks =\r\n    {\r\n        server: [\"test1\", \"test2\", \"test3\", \"test4\", \"test5\"],\r\n        network_1: [\"test1\", \"test2\", \"\"],\r\n        network_2: [\"test1\", \"test2\"],\r\n        storage: [\"test1\", \"test2\"],\r\n        peripheral: [\"test1\", \"test2\"]\r\n    }\r\n\r\n\r\n    function normalizeArrayLengths(data, fillValue = \"\") {\r\n        const maxLength = Math.max(...Object.values(data).map((arr) => arr.length));\r\n        return Object.fromEntries(\r\n            Object.entries(data).map(([key, value]) => [key, value.concat(Array(maxLength - value.length).fill(fillValue))])\r\n        );\r\n    }\r\n\r\n    const normalizedRacks = normalizeArrayLengths(racks);\r\n    console.log(normalizedRacks);\r\n\r\n    function addSerialNumbers() {\r\n        const tableBody = document.querySelector('tbody');\r\n        let serialNumber = 1; // Starting serial number\r\n      \r\n        // Loop through all table rows\r\n        const tableRows = tableBody.querySelectorAll('tr');\r\n        for (const row of tableRows) {\r\n          // Loop through all cells in the current row\r\n          const tableCells = row.querySelectorAll('td');\r\n          for (const cell of tableCells) {\r\n            cell.textContent = serialNumber + '. ' + cell.textContent;\r\n            serialNumber++; // Increment serial number for the next cell\r\n          }\r\n        }\r\n      }\r\n      \r\n      addSerialNumbers();\r\n\r\n    return (\r\n        <div className='flex mx-2 border-r border-black mt-10'>\r\n\r\n            <Table rack={normalizedRacks.server} name=\"Server\" />\r\n            <Table rack={normalizedRacks.network_1} name=\"Network-I\" />\r\n            <Table rack={normalizedRacks.network_2} name=\"Network-II\" />\r\n            <Table rack={normalizedRacks.storage} name=\"Storage\" />\r\n            <Table rack={normalizedRacks.peripheral} name=\"Peripheral\" />\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default GnG"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}