{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91981\\\\Nigel\\\\Internship\\\\ONGC\\\\ONGC_REACT_RACK\\\\myapp\\\\src\\\\components\\\\home_components\\\\GnG.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Table from '../reusable/Table';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GnG = ({\n  dataCenter\n}) => {\n  _s();\n  const [normalizedRacks, setNormalizedRacks] = useState({});\n\n  // Updated color mapping based on 'type' field\n  const colorMapping = {\n    1: \"rgba(255, 0, 0, 0.6)\",\n    // type 1 is for servers\n    2: \"rgba(0, 0, 255, 0.6)\",\n    // type 2 is for general storage devices\n    3: \"rgba(0, 128, 0, 0.6)\",\n    // type 3 is for switches\n    4: \"rgba(255, 165, 0, 0.6)\",\n    // type 4 is for tape drives\n    5: \"rgba(200, 165, 0, 0.6)\" // type 5 is for others\n  };\n  const getItemType = item => {\n    return colorMapping[item.type] || 'rgba(200, 200, 200, 0.6)'; // Default gray color\n  };\n  function normalizeArrayLengths(data, fillValue = \"\") {\n    let maxLength = 0;\n    for (const rack of Object.values(data)) {\n      for (const component of rack) {\n        maxLength = Math.max(maxLength, component.startSlot + component.size - 1);\n      }\n    }\n\n    // Applying normalization \n    return Object.fromEntries(Object.entries(data).map(([key, value]) => [key, value.concat(Array(maxLength - value.length).fill(fillValue))]));\n  }\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await axios.get(`/general/data-centers/${dataCenter}/components`);\n        const data = response.data;\n        console.log(\"Raw data:\", data);\n        const processedData = Object.entries(data).reduce((acc, [rackName, components]) => {\n          acc[rackName] = components.map(component => ({\n            ...component,\n            color: getItemType(component)\n          }));\n          return acc;\n        }, {});\n\n        // const normalizedData = normalizeArrayLengths(processedData);\n        setNormalizedRacks(processedData);\n      } catch (error) {\n        console.error(\"Error fetching components:\", error);\n        // Handle errors appropriately\n      }\n    }\n    fetchData();\n  }, [dataCenter]);\n  if (Object.keys(normalizedRacks).length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 text-xl font-bold\",\n      children: \"Gathering Assets...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 16\n    }, this);\n  }\n  const rackOrder = ['Server', 'Network1', 'Network2', 'Storage', 'Peripheral'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex mx-2 border-r border-black\",\n    children: rackOrder.map(rackName => {\n      if (normalizedRacks[rackName]) {\n        return /*#__PURE__*/_jsxDEV(Table, {\n          rack: normalizedRacks[rackName],\n          name: rackName\n        }, rackName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 28\n        }, this);\n      }\n      return null;\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(GnG, \"GNlhK6msdrZCFfe58dw2ryaLJyE=\");\n_c = GnG;\nexport default GnG;\nvar _c;\n$RefreshReg$(_c, \"GnG\");","map":{"version":3,"names":["React","useState","useEffect","Table","axios","jsxDEV","_jsxDEV","GnG","dataCenter","_s","normalizedRacks","setNormalizedRacks","colorMapping","getItemType","item","type","normalizeArrayLengths","data","fillValue","maxLength","rack","Object","values","component","Math","max","startSlot","size","fromEntries","entries","map","key","value","concat","Array","length","fill","fetchData","response","get","console","log","processedData","reduce","acc","rackName","components","color","error","keys","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rackOrder","name","_c","$RefreshReg$"],"sources":["C:/Users/91981/Nigel/Internship/ONGC/ONGC_REACT_RACK/myapp/src/components/home_components/GnG.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Table from '../reusable/Table'\r\nimport axios from \"axios\"\r\n\r\nconst GnG = ({ dataCenter }) => {\r\n    const [normalizedRacks, setNormalizedRacks] = useState({});\r\n\r\n    // Updated color mapping based on 'type' field\r\n    const colorMapping = {\r\n        1: \"rgba(255, 0, 0, 0.6)\",    // type 1 is for servers\r\n        2: \"rgba(0, 0, 255, 0.6)\",    // type 2 is for general storage devices\r\n        3: \"rgba(0, 128, 0, 0.6)\",    // type 3 is for switches\r\n        4: \"rgba(255, 165, 0, 0.6)\",  // type 4 is for tape drives\r\n        5: \"rgba(200, 165, 0, 0.6)\",  // type 5 is for others\r\n\r\n    };\r\n\r\n    const getItemType = (item) => {\r\n        return colorMapping[item.type] || 'rgba(200, 200, 200, 0.6)'; // Default gray color\r\n    };\r\n\r\n    function normalizeArrayLengths(data, fillValue = \"\") {\r\n\r\n        let maxLength = 0;\r\n\r\n        for (const rack of Object.values(data)) {\r\n            for (const component of rack) {\r\n                maxLength = Math.max(maxLength, component.startSlot + component.size - 1);\r\n            }\r\n        }\r\n\r\n        // Applying normalization \r\n        return Object.fromEntries(\r\n            Object.entries(data).map(([key, value]) => [\r\n                key,\r\n                value.concat(Array(maxLength - value.length).fill(fillValue)),\r\n            ])\r\n        );\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                const response = await axios.get(`/general/data-centers/${dataCenter}/components`);\r\n                const data = response.data;\r\n                console.log(\"Raw data:\", data);\r\n\r\n\r\n                const processedData = Object.entries(data).reduce((acc, [rackName, components]) => {\r\n                    acc[rackName] = components.map(component => ({\r\n                        ...component,\r\n                        color: getItemType(component)\r\n                    }));\r\n                    return acc;\r\n                }, {});\r\n\r\n                // const normalizedData = normalizeArrayLengths(processedData);\r\n                setNormalizedRacks(processedData);\r\n            } catch (error) {\r\n                console.error(\"Error fetching components:\", error);\r\n                // Handle errors appropriately\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n    }, [dataCenter]);\r\n\r\n    if (Object.keys(normalizedRacks).length === 0) {\r\n        return <div className='p-4 text-xl font-bold'>Gathering Assets...</div>;\r\n    }\r\n\r\n    const rackOrder = ['Server', 'Network1', 'Network2', 'Storage', 'Peripheral'];\r\n\r\n    return (\r\n        <div className='flex mx-2 border-r border-black'>\r\n            {rackOrder.map(rackName => {\r\n                if (normalizedRacks[rackName]) {\r\n                    return <Table key={rackName} rack={normalizedRacks[rackName]} name={rackName} />;\r\n                }\r\n                return null;\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GnG"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,mBAAmB;AACrC,OAAOC,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,GAAG,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC5B,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE1D;EACA,MAAMW,YAAY,GAAG;IACjB,CAAC,EAAE,sBAAsB;IAAK;IAC9B,CAAC,EAAE,sBAAsB;IAAK;IAC9B,CAAC,EAAE,sBAAsB;IAAK;IAC9B,CAAC,EAAE,wBAAwB;IAAG;IAC9B,CAAC,EAAE,wBAAwB,CAAG;EAElC,CAAC;EAED,MAAMC,WAAW,GAAIC,IAAI,IAAK;IAC1B,OAAOF,YAAY,CAACE,IAAI,CAACC,IAAI,CAAC,IAAI,0BAA0B,CAAC,CAAC;EAClE,CAAC;EAED,SAASC,qBAAqBA,CAACC,IAAI,EAAEC,SAAS,GAAG,EAAE,EAAE;IAEjD,IAAIC,SAAS,GAAG,CAAC;IAEjB,KAAK,MAAMC,IAAI,IAAIC,MAAM,CAACC,MAAM,CAACL,IAAI,CAAC,EAAE;MACpC,KAAK,MAAMM,SAAS,IAAIH,IAAI,EAAE;QAC1BD,SAAS,GAAGK,IAAI,CAACC,GAAG,CAACN,SAAS,EAAEI,SAAS,CAACG,SAAS,GAAGH,SAAS,CAACI,IAAI,GAAG,CAAC,CAAC;MAC7E;IACJ;;IAEA;IACA,OAAON,MAAM,CAACO,WAAW,CACrBP,MAAM,CAACQ,OAAO,CAACZ,IAAI,CAAC,CAACa,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK,CACvCD,GAAG,EACHC,KAAK,CAACC,MAAM,CAACC,KAAK,CAACf,SAAS,GAAGa,KAAK,CAACG,MAAM,CAAC,CAACC,IAAI,CAAClB,SAAS,CAAC,CAAC,CAChE,CACL,CAAC;EACL;EAEAhB,SAAS,CAAC,MAAM;IACZ,eAAemC,SAASA,CAAA,EAAG;MACvB,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMlC,KAAK,CAACmC,GAAG,CAAC,yBAAyB/B,UAAU,aAAa,CAAC;QAClF,MAAMS,IAAI,GAAGqB,QAAQ,CAACrB,IAAI;QAC1BuB,OAAO,CAACC,GAAG,CAAC,WAAW,EAAExB,IAAI,CAAC;QAG9B,MAAMyB,aAAa,GAAGrB,MAAM,CAACQ,OAAO,CAACZ,IAAI,CAAC,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAE,CAACC,QAAQ,EAAEC,UAAU,CAAC,KAAK;UAC/EF,GAAG,CAACC,QAAQ,CAAC,GAAGC,UAAU,CAAChB,GAAG,CAACP,SAAS,KAAK;YACzC,GAAGA,SAAS;YACZwB,KAAK,EAAElC,WAAW,CAACU,SAAS;UAChC,CAAC,CAAC,CAAC;UACH,OAAOqB,GAAG;QACd,CAAC,EAAE,CAAC,CAAC,CAAC;;QAEN;QACAjC,kBAAkB,CAAC+B,aAAa,CAAC;MACrC,CAAC,CAAC,OAAOM,KAAK,EAAE;QACZR,OAAO,CAACQ,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD;MACJ;IACJ;IAEAX,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAAC7B,UAAU,CAAC,CAAC;EAEhB,IAAIa,MAAM,CAAC4B,IAAI,CAACvC,eAAe,CAAC,CAACyB,MAAM,KAAK,CAAC,EAAE;IAC3C,oBAAO7B,OAAA;MAAK4C,SAAS,EAAC,uBAAuB;MAAAC,QAAA,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC3E;EAEA,MAAMC,SAAS,GAAG,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,YAAY,CAAC;EAE7E,oBACIlD,OAAA;IAAK4C,SAAS,EAAC,iCAAiC;IAAAC,QAAA,EAC3CK,SAAS,CAAC1B,GAAG,CAACe,QAAQ,IAAI;MACvB,IAAInC,eAAe,CAACmC,QAAQ,CAAC,EAAE;QAC3B,oBAAOvC,OAAA,CAACH,KAAK;UAAgBiB,IAAI,EAAEV,eAAe,CAACmC,QAAQ,CAAE;UAACY,IAAI,EAAEZ;QAAS,GAA1DA,QAAQ;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAoD,CAAC;MACpF;MACA,OAAO,IAAI;IACf,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAA9C,EAAA,CA/EKF,GAAG;AAAAmD,EAAA,GAAHnD,GAAG;AAiFT,eAAeA,GAAG;AAAA,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}