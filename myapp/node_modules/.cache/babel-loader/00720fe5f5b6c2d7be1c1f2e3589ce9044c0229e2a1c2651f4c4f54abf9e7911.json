{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91981\\\\Nigel\\\\Internship\\\\ONGC\\\\ONGC_REACT_RACK\\\\myapp\\\\src\\\\components\\\\reusable\\\\Table.js\";\nimport React from 'react';\nimport './Table.css';\nimport Badge from './Badge';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Table = ({\n  rack,\n  name\n}) => {\n  // Calculate group information based on components\n  const groupedRack = rack.reduce((acc, item, index) => {\n    if (acc.length === 0 || item.name !== acc[acc.length - 1].name) {\n      acc.push({\n        ...item,\n        startIndex: item.startSlot,\n        endIndex: item.startSlot + item.size - 1\n      });\n    } else {\n      acc[acc.length - 1].endIndex = item.startSlot + item.size - 1;\n    }\n    return acc;\n  }, []);\n\n  // Function to identify and combine rows with empty slots\n  const combineRowsWithEmptySlots = data => {\n    var _currentRow2;\n    let currentRow = null; // Track current row\n    const combinedRows = [];\n    for (const item of data) {\n      // Check if a new row is needed based on empty slots\n      const needsNewRow = !currentRow ||\n      // No current row\n      currentRow.endIndex + 1 < item.startIndex; // Empty slots between items\n\n      if (needsNewRow) {\n        var _currentRow$endIndex, _currentRow;\n        // Create a new row for empty slots if needed\n        const emptyRow = {\n          startIndex: (_currentRow$endIndex = (_currentRow = currentRow) === null || _currentRow === void 0 ? void 0 : _currentRow.endIndex) !== null && _currentRow$endIndex !== void 0 ? _currentRow$endIndex : -1,\n          endIndex: item.startIndex - 1,\n          name: '',\n          rows: 1,\n          isComponent: false\n        }; // Mark as empty slot row\n        combinedRows.push(emptyRow);\n        currentRow = {\n          ...item,\n          rows: 1\n        }; // Create new row for the component\n        combinedRows.push(currentRow);\n      } else {\n        // Existing row, increment rows if consecutive\n        currentRow.rows++;\n      }\n    }\n\n    // Add an empty row at the end if needed\n    if (((_currentRow2 = currentRow) === null || _currentRow2 === void 0 ? void 0 : _currentRow2.endIndex) < data[data.length - 1].endIndex) {\n      const emptyRow = {\n        startIndex: currentRow.endIndex + 1,\n        endIndex: data[data.length - 1].endIndex,\n        name: '',\n        rows: 1,\n        isComponent: false\n      };\n      combinedRows.push(emptyRow);\n    }\n    return combinedRows;\n  };\n\n  // Combine rows with empty slots\n  const rowsWithEmptySlots = combineRowsWithEmptySlots(groupedRack);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"w-full table-fixed text-center text-white bg-teal-600\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      className: \"text-3xl\",\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: /*#__PURE__*/_jsxDEV(\"th\", {\n          className: \"py-2\",\n          children: [name, \" Rack\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: rowsWithEmptySlots.map((row, groupIndex) => {\n        const indexDisplay = row.isComponent ? `${row.startIndex + 1}-${row.endIndex + 1}` : `Empty - ${row.startIndex + 1}-${row.endIndex + 1}`; // Display range for empty slots\n        const rowHeight = `${row.rows * 3}rem`;\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"border-t-2 border-b-2 border-white\",\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"h-12 relative\",\n            style: {\n              height: rowHeight\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"absolute inset-0 flex items-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"pl-2 absolute left-0\",\n                children: [indexDisplay, \".\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"w-full flex justify-center items-center\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-10/12\",\n                  children: row.isComponent ? /*#__PURE__*/_jsxDEV(Badge, {\n                    label: row.name,\n                    color: row.color\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 75,\n                    columnNumber: 25\n                  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"h-full w-full bg-gray-300\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 77,\n                    columnNumber: 25\n                  }, this) // Visual indicator for empty slots\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)\n        }, groupIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","Badge","jsxDEV","_jsxDEV","Table","rack","name","groupedRack","reduce","acc","item","index","length","push","startIndex","startSlot","endIndex","size","combineRowsWithEmptySlots","data","_currentRow2","currentRow","combinedRows","needsNewRow","_currentRow$endIndex","_currentRow","emptyRow","rows","isComponent","rowsWithEmptySlots","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","row","groupIndex","indexDisplay","rowHeight","style","height","label","color","_c","$RefreshReg$"],"sources":["C:/Users/91981/Nigel/Internship/ONGC/ONGC_REACT_RACK/myapp/src/components/reusable/Table.js"],"sourcesContent":["import React from 'react';\r\nimport './Table.css';\r\nimport Badge from './Badge';\r\n\r\nconst Table = ({ rack, name }) => {\r\n  // Calculate group information based on components\r\n  const groupedRack = rack.reduce((acc, item, index) => {\r\n    if (acc.length === 0 || item.name !== acc[acc.length - 1].name) {\r\n      acc.push({ ...item, startIndex: item.startSlot, endIndex: item.startSlot + item.size - 1 });\r\n    } else {\r\n      acc[acc.length - 1].endIndex = item.startSlot + item.size - 1;\r\n    }\r\n    return acc;\r\n  }, []);\r\n\r\n  // Function to identify and combine rows with empty slots\r\n  const combineRowsWithEmptySlots = (data) => {\r\n    let currentRow = null; // Track current row\r\n    const combinedRows = [];\r\n\r\n    for (const item of data) {\r\n      // Check if a new row is needed based on empty slots\r\n      const needsNewRow =\r\n        !currentRow || // No current row\r\n        currentRow.endIndex + 1 < item.startIndex; // Empty slots between items\r\n\r\n      if (needsNewRow) {\r\n        // Create a new row for empty slots if needed\r\n        const emptyRow = { startIndex: currentRow?.endIndex ?? -1, endIndex: item.startIndex - 1, name: '', rows: 1, isComponent: false }; // Mark as empty slot row\r\n        combinedRows.push(emptyRow);\r\n        currentRow = { ...item, rows: 1 }; // Create new row for the component\r\n        combinedRows.push(currentRow);\r\n      } else {\r\n        // Existing row, increment rows if consecutive\r\n        currentRow.rows++;\r\n      }\r\n    }\r\n\r\n    // Add an empty row at the end if needed\r\n    if (currentRow?.endIndex < data[data.length - 1].endIndex) {\r\n      const emptyRow = { startIndex: currentRow.endIndex + 1, endIndex: data[data.length - 1].endIndex, name: '', rows: 1, isComponent: false };\r\n      combinedRows.push(emptyRow);\r\n    }\r\n\r\n    return combinedRows;\r\n  };\r\n\r\n  // Combine rows with empty slots\r\n  const rowsWithEmptySlots = combineRowsWithEmptySlots(groupedRack);\r\n\r\n  return (\r\n    <table className=\"w-full table-fixed text-center text-white bg-teal-600\">\r\n      <thead className=\"text-3xl\">\r\n        <tr>\r\n          <th className=\"py-2\">{name} Rack</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {rowsWithEmptySlots.map((row, groupIndex) => {\r\n          const indexDisplay = row.isComponent\r\n            ? `${row.startIndex + 1}-${row.endIndex + 1}`\r\n            : `Empty - ${row.startIndex + 1}-${row.endIndex + 1}`; // Display range for empty slots\r\n          const rowHeight = `${row.rows * 3}rem`;\r\n\r\n          return (\r\n            <tr key={groupIndex} className=\"border-t-2 border-b-2 border-white\">\r\n              <td className=\"h-12 relative\" style={{ height: rowHeight }}>\r\n                <div className=\"absolute inset-0 flex items-center\">\r\n                  <span className=\"pl-2 absolute left-0\">\r\n                    {indexDisplay}.\r\n                  </span>\r\n                  <div className=\"w-full flex justify-center items-center\">\r\n                    <span className=\"w-10/12\">\r\n                      {row.isComponent ? (\r\n                        <Badge label={row.name} color={row.color} />\r\n                      ) : (\r\n                        <div className=\"h-full w-full bg-gray-300\" /> // Visual indicator for empty slots\r\n                      )}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}